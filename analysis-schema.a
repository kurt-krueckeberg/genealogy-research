= Analysis of the Rootsmagic Database

== Tables Related to Persons, Names, and Relationships, etc.

=== PersonTable

The `PersonTable.PersonID` key identifies a unique person (in the family tree) with sex `Sex` and with unique `UniqueID` (apparently a `GUID` or hash value that is a **GEDCOM** standard field).

.PersonTable
[width="99%"]
|===
|PersonID Int (Prim Key) |UniqueID TEXT |Sex Int |ParentID Int |SpouseID Int |Color Int |Relate1 Int |Relate2 Int
|Flags Int |Living Int |IsPrivate Int |Proof Int |Bookmark Int |Note TEXT |UTCModDate Float
|===

=== NameTable

The `NameTable.NameID` key identifies each unique name with surname `Surname`, given name `Given`, birth year `BirthYear` and death year `DeathYear`.

The *primary name* appears first (with the smallest NameID). Any alternate names (typically alternate given names) immediately follow.

`OwnerID` is a foreign key corresponding to the `PersonTable.PersonID`, the person to whom the name belongs. We infer this from the facts:

. `count(OwnerID) == count(PersonID)`, and
. A `PersonID` must have a name, there must be a link to their `NameTable` name(s) and the other associated facts in `NameTable`.

.NameTable
[width="99%",cols="17%,3%,4%,3%,3%,3%,4%,4%,3%,5%,4%,4%,3%,4%,3%,4%,4%,3%,4%,5%,4%,4%,5%",]
|===
|NameID Int (Prim Key) |OwnerID Int |Surname TEXT |Given TEXT |Prefix TEXT |Suffix TEXT |Nickname TEXT |NameType Int |Date TEXT |SortDate
BigInt |IsPrimary Int |IsPrivate Int |Proof Int |Sentence TEXT |Note TEXT |BirthYear Int |DeathYear Int |Display Int |Language TEXT
|UTCModDate Float |SurnameMP TEXT |GivenMP TEXT |NicknameMP TEXT
|===

=== FamilyTable

`FamilyTable` has `FamilyID` key to identify each unique family. The pair `FatherID` and `MotherID` must also clearly be unique, and no doubt are foreign keys referencing `PersonTable.PersonID`. 

The unique pair `FatherID` plus `MotherID` can have zero or more children. I doubt that a child is required to constitute a family, but this predicate for `FamilyTable` has not been verified.
Genealogical software does not, in general, does not directly concern itslef with issues like whether the offspring of a realtionship ever live with or grow up with their parents.

It appears that if a mother or father is unknown their `FatherID` or `MotherID` is 0.

.FamilyTable
[width="99%",cols="18%,5%,5%,4%,5%,5%,5%,4%,6%,6%,6%,7%,7%,7%,4%,6%",]
|===
|FamilyID Int (Prim Key) |FatherID Int |MotherID Int |ChildID Int |HusbOrder Int |WifeOrder Int |IsPrivate Int |Proof Int |SpouseLabel Int
|FatherLabel Int |MotherLabel Int |SpouseLabelStr TEXT |FatherLabelStr TEXT |MotherLabelStr TEXT |Note TEXT |UTCModDate Float
|===

=== ChildTable 

`ChildTable` has key `RecID`, child identifier `ChildID`, no doubt a foreign key referencing the `PersonTable.PersonID`, family identifier `FamilyID` a foreign key referencing `FamilyTable.FamilyID`
and `ChildOrder` indicating birth order. The integer attributes `RelFather` and `RelMother` are unclear.

All children with the same `FamilyID` belong to the same family in the sense they have the same set of parents.

Can a child belong to more than one family? And what if a person does not yet have any or both assigned parents. In this case, there should be no entry for them in the `ChildTable` or `FamilyTable`.

.ChildTable
[width="97%",cols="16%,14%,14%,14%,14%,14%,14%",]
|===
|RecID Int (Prim Key) |ChildID Int |FamilyID Int |RelFather Int |RelMother Int |Chi ldOrder Int |Is Private Int
|===

== Analysis of Tables Related to Downloaded Ancestry Media Files

== Todoes

=== DB Questions to Figure Out

Figure out if "family" means there must be a child. To test this use my Frankenstein tree. Give a wife to the son, but give them no children, expert and import to rootsmagic.
And create a SQL join statment, left or right join, to determine if there persons with no parents.

SQL to show persons with no children is also desired.

=== Ancestry Medis Files

Incorporate my notes for assigning Ancestry Media Gallery files to the correct person.

=== New DB with Forign Key Contraints

After figure out the question above, dump the Rootsmagic db and import it into a new DB that has the foreign key contraints described above.

=== Other 

- Look into an alternate solution of:

  - Github FamilySearch Converting GEDCOM 5 to GECOM X, and then

  - Github FamilySearch GEDCOM 5 Parser

  - Using Github FamilySearch PHP Gecom X library to extract the details.

- Look into Webtrees and its tables.

